from django.shortcuts import render
from rest_framework import generics
from rest_framework.response import Response
from rest_framework import status
from .models import Applications, Product, Specialist
from .serializer import ApplicationsSerializer, ProductSerializer, SpecialistSerializer
import requests
from decouple import config




class ApplicationsViews(generics.CreateAPIView):
    queryset = Applications.objects.all()
    serializer_class = ApplicationsSerializer

    def perform_create(self, serializer):
        lead = serializer.save()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–∞
        text = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n"
            f"–ò–º—è: {lead.name}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {lead.contact}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {lead.message or '-'}\n"
            f"–í—Ä–µ–º—è: {lead.created_at.strftime('%Y-%m-%d %H:%M:%S')}"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        url = f"https://api.telegram.org/bot{config('TOKEN')}/sendMessage"
        payload = {
            "chat_id": config('CHAT_ID'),
            "text": text
        }
        r = requests.post(url, json=payload)

        if r.status_code == 200:
            lead.notified = True
            lead.save(update_fields=['notified'])
        else:
            # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ç—Ä–∞–π
            pass


class ProductView(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer


class ProductUpdateDeleteView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer


class SpecialistUpdateDeleteView(generics.ListCreateAPIView):
    queryset = Specialist.objects.all()
    serializer_class = SpecialistSerializer